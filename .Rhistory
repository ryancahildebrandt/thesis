"Participant.Group")),
postHocCorr = c("tukey","scheffe"),
emmPlots = FALSE,
emmWeights = FALSE,
groupSumm = TRUE)
rm.bdi <- jmv::anovaRM(
data = sl.agg.rm.spss,
rm = list(
list(
label="Word Type",
levels=c("Emotion-label", "Emotion-laden")),
list(
label="Primed/Satiated",
levels=c("Primed", "Satiated"))),
rmCells = list(
list(
measure="1_1",
cell=c("Emotion-label", "Primed")),
list(
measure="1_2",
cell=c("Emotion-label", "Satiated")),
list(
measure="2_1",
cell=c("Emotion-laden", "Primed")),
list(
measure="2_2",
cell=c("Emotion-laden", "Satiated"))),
bs = vars(Participant.Group, bdi),
effectSize = c("ges", "eta", "partEta"),
depLabel = "RT",
rmTerms = ~ `Word Type` + `Primed/Satiated` + `Word Type`:`Primed/Satiated`,
bsTerms = ~ Participant.Group + bdi + Participant.Group:bdi,
spherTests = TRUE,
leveneTest = TRUE,
postHoc = list(),
postHocCorr = NULL,
emmPlots = FALSE,
emmWeights = FALSE,
groupSumm = TRUE
)
return(list(
rm.simple,
rm.bdi
))
}
#rmaov.pipe(sl.trimmed)
#rmaov.pipe(sl.recoded.avg)
#rmaov.pipe(sl.recoded.ind)
#rmaov.pipe(sl.removed.avg)
#rmaov.pipe(sl.removed.ind)
desc.pipe <- function(df) {
return(list(
prop.table(table(df$Participant.Group)),
prop.table(table(df$Correct.Response)),
prop.table(table(df$Error.Code)),
prop.table(table(df$X.Primed.Satiated)),
prop.table(table(df$Target.V)),
prop.table(table(df$Pair1.V)),
prop.table(table(df$Pair2.V)),
prop.table(table(df$Target.WT)),
prop.table(table(df$Pair1.WT)),
prop.table(table(df$Pair2.WT)),
prop.table(table(df$bdi)),
prop.table(table(df$stai.y1)),
prop.table(table(df$stai.y2)),
prop.table(table(df$mood.state.2)),
prop.table(table(df$mood.state.2.y1)),
prop.table(table(df$mood.state.2.y2)),
prop.table(table(df$mood.state.4.y1)),
prop.table(table(df$mood.state.4.y2)),
prop.table(table(df$mood.state.4)),
prop.table(table(df$mood.state.8)),
prop.table(table(df$Age)),
prop.table(table(df$Gender)),
prop.table(table(df$Handedness)),
prop.table(table(df$Hearing.Status)),
prop.table(table(df$Pair.MM)),
prop.table(table(df$Pair.WT)),
prop.table(table(df$TPRValence)),
prop.table(table(df$TPRWT)),
prop.table(table(df$Valence.Congruency)),
prop.table(table(df$Word.Type.Congruency)),
prop.table(table(df$Primed.Satiated.MM)),
describe(select(df, Reaction.Time, bdi.tot, stai.y1.tot, stai.y2.tot, Age))
))
}
desc.pipe(sl.trimmed)
desc.pipe(sl.recoded.avg)
desc.pipe(sl.recoded.ind)
desc.pipe(sl.removed.avg)
desc.pipe(sl.removed.ind)
rt.participant <- aggregate(sl.trimmed$Reaction.Time, by = list(sl.trimmed$Session.ID), FUN = mean, na.rm = TRUE) %>%
rename(., Session.ID = "Group.1", Reaction.Time = "x")
#  Accuracy By Participant Pipes
accuracy.df.pipe <- function(sldf) {
sldf.accuracy <- sldf %>%
select(., c(Session.ID, Error.Code)) %>%
table(.) %>%
data.frame(.) %>%
recast(., formula = Session.ID ~ Error.Code, id.var = c("Session.ID", "Error.Code")) %>%
merge(., rt.participant, by = "Session.ID") %>%
mutate(.,
Response.Rate = (.$C + .$E) / (.$C + .$E + .$NR),
Accuracy = .$C / (.$C + .$E)
) %>%
return(.)
}
accuracy.vis.pipe <- function(sldf.accuracy) {
return(
list(
formattable(describe(sldf.accuracy)),
plot_histogram(sldf.accuracy$Accuracy),
plot_histogram(sldf.accuracy$Response.Rate),
plot_histogram(sldf.accuracy$Reaction.Time),
boxplot(sldf.accuracy$Response.Rate),
boxplot(sldf.accuracy$Accuracy),
boxplot(sldf.accuracy$Reaction.Time),
formattable(cor(sldf.accuracy[2:7]))
)
)
}
accuracy.trial.pipe <- function(sldf) {
acc.trial <- sldf %>%
recast(., formula = Trial.ID ~ Error.Code, id.var = c("Trial.ID", "Error.Code")) %>%
mutate(.,
Response.Rate = (.$C + .$E) / (.$C + .$E + .$NR),
Accuracy = .$C / (.$C + .$E)
)
return(
list(
formattable(acc.trial),
plot_histogram(acc.trial$Accuracy)
)
)
}
#  Apply Pipes to Data Frames
acc.sl.trimmed <- sl.trimmed %>%
accuracy.df.pipe(.) %T>%
accuracy.vis.pipe(.)
acc.sl.recoded.avg <- sl.recoded.avg %>%
accuracy.df.pipe(.) %T>%
accuracy.vis.pipe(.)
acc.sl.recoded.ind <- sl.recoded.ind %>%
accuracy.df.pipe(.) %T>%
accuracy.vis.pipe(.)
acc.sl.removed.avg <- sl.removed.avg %>%
accuracy.df.pipe(.) %T>%
accuracy.vis.pipe(.)
acc.sl.removed.ind <- sl.removed.ind %>%
accuracy.df.pipe(.) %T>%
accuracy.vis.pipe(.)
accuracy.trial.pipe(sl.trimmed)
accuracy.trial.pipe(sl.recoded.avg)
accuracy.trial.pipe(sl.recoded.ind)
accuracy.trial.pipe(sl.removed.avg)
accuracy.trial.pipe(sl.removed.ind)
#aov.pipe for the main anova analyses
aov.pipe <- function(sldf){
return(list(planned3=jmv::ANOVA(
formula = Reaction.Time ~ X.Primed.Satiated * Word.Type.n * Valence.Congruency.n,
data = dplyr::filter(sldf, bdi == "Non-Scoring" & Error.Code == "C"),
effectSize = c("eta", "partEta"),
homo = TRUE,
norm = TRUE,
qq = TRUE,
postHoc = ~ X.Primed.Satiated * Word.Type.n * Valence.Congruency.n,
postHocCorr = c("tukey", "scheffe"),
emMeans = ~ X.Primed.Satiated * Word.Type.n * Valence.Congruency.n,
emmTables = TRUE),
wt3=jmv::ANOVA(
formula = Reaction.Time ~ bdi * X.Primed.Satiated * Target.WT,
data = dplyr::filter(sldf, Error.Code == "C"),
effectSize = c("eta", "partEta"),
homo = TRUE,
norm = TRUE,
qq = TRUE,
postHoc = ~ bdi * X.Primed.Satiated * Target.WT,
postHocCorr = c("tukey", "scheffe"),
emMeans = ~ bdi * X.Primed.Satiated * Target.WT,
emmTables = TRUE),
v3=jmv::ANOVA(
formula = Reaction.Time ~ bdi * X.Primed.Satiated * Valence.Congruency.n,
data = dplyr::filter(sldf, Error.Code == "C"),
effectSize = c("eta", "partEta"),
homo = TRUE,
norm = TRUE,
qq = TRUE,
postHoc = ~ bdi * X.Primed.Satiated * Valence.Congruency.n,
postHocCorr = c("tukey", "scheffe"),
emMeans = ~ bdi * X.Primed.Satiated * Valence.Congruency.n,
emmTables = TRUE),
rta4=jmv::ANOVA(
formula = Reaction.Time ~ bdi * X.Primed.Satiated * Word.Type.n * Valence.Congruency.n,
data = sldf,
effectSize = c("eta", "partEta"),
homo = TRUE,
norm = TRUE,
qq = TRUE,
postHoc = ~ bdi * X.Primed.Satiated * Word.Type.n * Valence.Congruency.n,
postHocCorr = c("tukey", "scheffe"),
emMeans = ~ bdi * X.Primed.Satiated * Word.Type.n * Valence.Congruency.n,
emmTables = TRUE),
rtc4=jmv::ANOVA(
formula = Reaction.Time ~ bdi * X.Primed.Satiated * Word.Type.n * Valence.Congruency.n,
data = dplyr::filter(sldf, Error.Code == "C"),
effectSize = c("eta", "partEta"),
homo = TRUE,
norm = TRUE,
qq = TRUE,
postHoc = ~ bdi * X.Primed.Satiated * Word.Type.n * Valence.Congruency.n,
postHocCorr = c("tukey", "scheffe"),
emMeans = ~ bdi * X.Primed.Satiated * Word.Type.n * Valence.Congruency.n,
emmTables = TRUE)))
}
#    aov.pipe(sl.trimmed)
#aov.pipe(sl.recoded.avg)
#  aov.pipe(sl.recoded.ind) # singular
#  aov.pipe(sl.removed.avg) # Too many missing values, imbalanced, disregard
#  aov.pipe(sl.removed.ind) # Too many missing values, imbalanced, disregard
sl.regression <- sl.trimmed %>%
merge(., sam.cat.comp.val[c("Target", "Rated.Mean", "ANEW.Mean", "Difference", "Rated.Category", "ANEW.Category")], by = "Target") %>%
merge(., sam.comp.ar[c("Target", "Rated.Mean", "ANEW.Mean", "Difference")], by = "Target") %>%
rename(.,
"Valence.Rated.Mean" = Rated.Mean.x,
"Valence.ANEW.Mean" = ANEW.Mean.x,
"Valence.Difference" = Difference.x,
"Arousal.Rated.Mean" = Rated.Mean.y,
"Arousal.ANEW.Mean" = ANEW.Mean.y,
"Arousal.Difference" = Difference.y
) %>%
mutate(.,
Valence.ANEW.abs = abs(.$Valence.ANEW.Mean - 4.5),
Valence.Rated.abs = abs(.$Valence.Rated.Mean - 4.5),
Arousal.ANEW.abs = abs(.$Arousal.ANEW.Mean - 4.5),
Arousal.Rated.abs = abs(.$Arousal.Rated.Mean - 4.5)
)
#write.csv(sl.regression, file = "sl.regression.csv")
big.glm<-glm(Reaction.Time ~
Valence.ANEW.Mean +
Arousal.ANEW.Mean +
Valence.Rated.Mean +
Arousal.Rated.Mean +
Valence.ANEW.abs +
Arousal.ANEW.abs +
Valence.Rated.abs +
Arousal.Rated.abs +
bdi.tot +
stai.y1.tot +
stai.y2.tot +
X.Primed.Satiated +
Target.WT,
data = sl.regression
)
baby.glm<-glm(Reaction.Time ~
Valence.ANEW.Mean +
bdi.tot +
stai.y1.tot +
X.Primed.Satiated +
Target.WT,
data = sl.regression
)
big.glm
summary(big.glm)
summ(big.glm)
stepAIC(big.glm)
baby.glm
summary(baby.glm)
summ(baby.glm)
stepAIC(baby.glm)
summ(glm(formula = Reaction.Time ~ bdi.tot + stai.y1.tot + Target.WT,
data = sl.regression))
#----
rm.exn.ps<-data.frame(Primed.Satiated =c("Primed","Satiated"),
Mean =c(1374.988,1419.129),
SE =c(34.774,34.774),
Lower  =c(1305.742,1349.882),
Upper =c(1444.234,1488.375))
ggplot(rm.exn.ps, aes(x= Primed.Satiated, y = Mean)) +
geom_point(size=3, shape=20)+
geom_errorbar(aes(ymin = Lower, ymax = Upper), size=.5, width=.13) +
ylab("Mean Reaction Time (ms)")+
expand_limits(y = 0:2000) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("Mean Reaction Time by Primed/Satiated")+
theme_grey()+
theme(rect = element_rect(fill = "transparent"))+
theme(text = element_text(size=20),axis.text.x = element_text(angle=20, hjust=1))
#----
rm.exn.wt.ps.val<-data.frame(Word.Type =c(rep("Emotion-label",4),rep("Emotion-laden",4)),
Primed.Satiated =c(rep(c("Primed","Primed","Satiated","Satiated"),2)),
Participant.Group =c(rep(c("Negative","Positive"),4)),
Mean =c(1359.033,1368.900,1425.369,1391.637,1426.055,1345.964,1387.767,1471.741),
SD =c(275.526,282.975,305.962,374.682,300.152,288.812,287.703,331.938)) %>%
mutate(., SE=.$SD/sqrt(35)) %>%
mutate(., Upper=.$Mean+.$SE,
Lower=.$Mean-.$SE)
ggplot(rm.exn.wt.ps.val, aes(x= Word.Type, y = Mean, group=Primed.Satiated, color=Primed.Satiated)) +
geom_point(size=3, shape=20, position=position_dodge(.2))+
geom_errorbar(aes(ymin = Lower, ymax = Upper), size=.5, width=.13, position=position_dodge(.2)) +
geom_line(position=position_dodge(.2))+
facet_grid(cols= vars(Participant.Group)) +
ylab("Mean Reaction Time (ms)")+
expand_limits(y = 0:2000) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("Mean Reaction Time by Word Type & Primed/Satiated")+
theme_grey()+
theme(legend.title=element_blank())+
theme(rect = element_rect(fill = "transparent"))+
theme(text = element_text(size=20),axis.text.x = element_text(angle=20, hjust=1))
#----
rm.exn.bdi.ps<-data.frame(Primed.Satiated =c("Primed","Satiated"),
Mean =c(1373.709,1420.407),
SE =c(35.029,35.029),
Lower  =c(1303.953,1350.650),
Upper =c(1443.466,1490.164))
ggplot(rm.exn.bdi.ps, aes(x= Primed.Satiated, y = Mean)) +
geom_point(size=3, shape=20)+
geom_errorbar(aes(ymin = Lower, ymax = Upper), size=.5, width=.13) +
ylab("Mean Reaction Time (ms)")+
expand_limits(y = 0:2000) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("Mean Reaction Time by Primed/Satiated")+
theme_grey()+
theme(rect = element_rect(fill = "transparent"))+
theme(text = element_text(size=20),axis.text.x = element_text(angle=20, hjust=1))
#----
rm.exn.bdi.wt.ps.val<-data.frame(Word.Type =c(rep("Emotion-label",4),rep("Emotion-laden",4)),
Primed.Satiated =c(rep(c("Primed","Primed","Satiated","Satiated"),2)),
Participant.Group =c(rep(c("Negative","Positive"),4)),
Mean =c(1359.033,1368.900,1425.369,1391.637,1426.055,1345.964,1387.767,1471.741),
SD =c(275.526,282.975,305.962,374.682,300.152,288.812,287.703,331.938)) %>%
mutate(., SE=.$SD/sqrt(35)) %>%
mutate(., Upper=.$Mean+.$SE,
Lower=.$Mean-.$SE)
ggplot(rm.exn.bdi.wt.ps.val, aes(x= Word.Type, y = Mean, group=Primed.Satiated, color=Primed.Satiated)) +
geom_point(size=3, shape=20, position=position_dodge(.2))+
geom_errorbar(aes(ymin = Lower, ymax = Upper), size=.5, width=.13, position=position_dodge(.2)) +
geom_line(position=position_dodge(.2))+
facet_grid(cols= vars(Participant.Group)) +
ylab("Mean Reaction Time (ms)")+
expand_limits(y = 0:2000) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("Mean Reaction Time by Word Type & Primed/Satiated")+
theme_grey()+
theme(legend.title=element_blank())+
theme(rect = element_rect(fill = "transparent"))+
theme(text = element_text(size=20),axis.text.x = element_text(angle=20, hjust=1))
#----
rm.incn.wt<-data.frame(Word.Type =c("Emotion-label","Emotion-laden","Neutral"),
Mean =c(1386.235,1407.882,1585.602),
SE =c(34.363,34.363,34.363),
Lower  =c(1318.069,1339.716,1517.436),
Upper =c(1454.401,1476.048,1653.768))
ggplot(rm.incn.wt, aes(x= Word.Type, y = Mean)) +
geom_point(size=3, shape=20)+
geom_errorbar(aes(ymin = Lower, ymax = Upper), size=.5, width=.13) +
ylab("Mean Reaction Time (ms)")+
expand_limits(y = 0:2000) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("Mean Reaction Time by Word Type")+
theme_grey()+
theme(rect = element_rect(fill = "transparent"))+
theme(text = element_text(size=20),axis.text.x = element_text(angle=20, hjust=1))
#----
rm.incn.wt.ps<-data.frame(Word.Type =c("Emotion-label","Emotion-label","Emotion-laden","Emotion-laden","Neutral","Neutral"),
Primed.Satiated =c(rep(c("Primed","Satiated"),3)),
Mean =c(1363.966,1408.503,1386.010,1429.754,1607.085,1564.119),
SE =c(36.394,36.394,36.394,36.394,36.394,36.394),
Lower  =c(1291.946,1336.482,1313.989,1357.733,1535.064,1492.098),
Upper =c(1435.987,1480.524,1458.030,1501.775,1679.106,1636.140))
ggplot(rm.incn.wt.ps, aes(x= Word.Type, y = Mean, group=Primed.Satiated, color=Primed.Satiated)) +
geom_point(size=3, shape=20, position=position_dodge(.2))+
geom_errorbar(aes(ymin = Lower, ymax = Upper), size=.5, width=.13, position=position_dodge(.2)) +
geom_line(position=position_dodge(.2))+
ylab("Mean Reaction Time (ms)")+
expand_limits(y = 0:2000) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("Mean Reaction Time by Word Type & Primed/Satiated")+
theme_grey()+
theme(legend.title=element_blank())+
theme(rect = element_rect(fill = "transparent"))+
theme(text = element_text(size=20),axis.text.x = element_text(angle=20, hjust=1))
#----
rm.incn.wt.ps.val<-data.frame(Word.Type =c(rep("Emotion-label",4),rep("Emotion-laden",4),rep("Neutral",4)),
Primed.Satiated =c(rep(c("Primed","Primed","Satiated","Satiated"),3)),
Participant.Group =c(rep(c("Negative","Positive"),6)),
Mean =c(1359.033,1368.900,1425.369,1391.637,1426.055,1345.964,1387.767,1471.741,1635.989,1578.180,1595.875,1532.362),
SD =c(275.526,282.975,305.962,374.682,300.152,288.812,287.703,331.938,266.254,332.288,244.566,339.172)) %>%
mutate(., SE=.$SD/sqrt(35)) %>%
mutate(., Upper=.$Mean+.$SE,
Lower=.$Mean-.$SE)
ggplot(rm.incn.wt.ps.val, aes(x= Word.Type, y = Mean, group=Primed.Satiated,color=Primed.Satiated)) +
geom_point(size=3, shape=20, position=position_dodge(.2))+
geom_errorbar(aes(ymin = Lower, ymax = Upper), size=.5, width=.13, position=position_dodge(.2)) +
geom_line(position=position_dodge(.2))+
facet_grid(cols= vars(Participant.Group)) +
ylab("Mean Reaction Time (ms)")+
expand_limits(y = 0:2000) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("Mean Reaction Time by Word Type & Primed/Satiated")+
theme_grey()+
theme(legend.title=element_blank())+
theme(rect = element_rect(fill = "transparent"))+
theme(text = element_text(size=20),axis.text.x = element_text(angle=20, hjust=1))
#----
rm.incn.bdi.wt<-data.frame(Word.Type =c("Emotion-label","Emotion-laden","Neutral"),
Mean =c(1381.240,1406.022,1592.456),
SE =c(34.926,34.926,34.926),
Lower  =c(1312.003,1336.785,1523.219),
Upper =c(1450.477,1475.260,1661.693))
ggplot(rm.incn.bdi.wt, aes(x= Word.Type, y = Mean)) +
geom_point(size=3, shape=20)+
geom_errorbar(aes(ymin = Lower, ymax = Upper), size=.5, width=.13) +
ylab("Mean Reaction Time (ms)")+
expand_limits(y = 0:2000) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("Mean Reaction Time by Word Type")+
theme_grey()+
theme(rect = element_rect(fill = "transparent"))+
theme(text = element_text(size=20),axis.text.x = element_text(angle=20, hjust=1))
#----
rm.incn.bdi.wt.ps<-data.frame(Word.Type =c("Emotion-label","Emotion-label","Emotion-laden","Emotion-laden","Neutral","Neutral"),
Primed.Satiated =c(rep(c("Primed","Satiated"),3)),
Mean =c(1356.469,1406.011,1384.096,1427.949,1616.490,1568.423),
SE =c(37.409,37.409,37.409,37.409,37.409,37.409),
Lower  =c(1282.504,1332.046,1310.131,1353.984,1542.525,1494.458),
Upper =c(1430.433,1479.976,1458.060,1501.913,1690.454,1642.387))
ggplot(rm.incn.bdi.wt.ps, aes(x= Word.Type, y = Mean, group=Primed.Satiated, color=Primed.Satiated)) +
geom_point(size=3, shape=20, position=position_dodge(.2))+
geom_errorbar(aes(ymin = Lower, ymax = Upper), size=.5, width=.13, position=position_dodge(.2)) +
geom_line(position=position_dodge(.2))+
ylab("Mean Reaction Time (ms)")+
expand_limits(y = 0:2000) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("Mean Reaction Time by Word Type & Primed/Satiated")+
theme_grey()+
theme(legend.title=element_blank())+
theme(rect = element_rect(fill = "transparent"))+
theme(text = element_text(size=20),axis.text.x = element_text(angle=20, hjust=1))
#----
rm.incn.bdi.wt.ps.val<-data.frame(Word.Type =c(rep("Emotion-label",4),rep("Emotion-laden",4),rep("Neutral",4)),
Primed.Satiated =c(rep(c("Primed","Primed","Satiated","Satiated"),3)),
Participant.Group =c(rep(c("Negative","Positive"),6)),
Mean =c(1359.033,1368.900,1425.369,1391.637,1426.055,1345.964,1387.767,1471.741,1635.989,1578.180,1595.875,1532.362),
SD =c(275.526,282.975,305.962,374.682,300.152,288.812,287.703,331.938,266.254,332.288,244.566,339.172)) %>%
mutate(., SE=.$SD/sqrt(35)) %>%
mutate(., Upper=.$Mean+.$SE,
Lower=.$Mean-.$SE)
ggplot(rm.incn.bdi.wt.ps.val, aes(x= Word.Type, y = Mean, group=Primed.Satiated, color=Primed.Satiated)) +
geom_point(size=3, shape=20, position=position_dodge(.2))+
geom_errorbar(aes(ymin = Lower, ymax = Upper), size=.5, width=.13, position=position_dodge(.2)) +
geom_line(position=position_dodge(.2))+
facet_grid(cols= vars(Participant.Group)) +
ylab("Mean Reaction Time (ms)")+
expand_limits(y = 0:2000) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("Mean Reaction Time by Word Type & Primed/Satiated")+
theme_grey()+
theme(legend.title=element_blank())+
theme(rect = element_rect(fill = "transparent"))+
theme(text = element_text(size=20),axis.text.x = element_text(angle=20, hjust=1))
#  Read column names----
sl.cols <- gsub("NA", "", paste(
read.delim(
file = "./rawdata/timingtest2.txt", nrows = 2, skip = 3,
header = FALSE, na.strings = "", colClasses = rep("character", 32)
)[1, ],
read.delim(
file = "./rawdata/timingtest2.txt", nrows = 2, skip = 3,
header = FALSE, na.strings = "", colClasses = rep("character", 32)
)[2, ]
))[c(1:9, 11:33)]
#  define column classes, list of superlab files, and session IDs
sl.class <- c(rep("character", 4), "numeric", "character", "numeric", "character", "numeric", "numeric", rep("character", 8), "numeric", rep("character", 14))
sl.files <- list.files("./rawdata")[grep("\\d{4}\\.txt", list.files())]
sl.names <- gsub(".txt", "", sl.files)
#  Read in all files and combine into a single table
sl.l <- lapply(sl.files, FUN = read.sl)
sl.raw <- bind_rows(sl.l)[c(1:11, 16:18, 25:32)]
#  define column classes, list of superlab files, and session IDs
sl.class <- c(rep("character", 4), "numeric", "character", "numeric", "character", "numeric", "numeric", rep("character", 8), "numeric", rep("character", 14))
sl.files <- list.files("./rawdata")[grep("\\d{4}\\.txt", list.files("./rawdata"))]
sl.names <- gsub(".txt", "", sl.files)
#  Read in all files and combine into a single table
sl.l <- lapply(sl.files, FUN = read.sl)
list.files
list.files("./rawdata")
list.files("./rawdata")[grep("\\d{4}\\.txt", list.files("./rawdata"))]
gsub(".txt", "", sl.files)
list.files("./rawdata")
sl.files
list.files("./rawdata")[grep("\\d{4}\\.txt", list.files("./rawdata"))] %>% paste0("./rawdata/",.)
#  Read column names----
sl.cols <- gsub("NA", "", paste(
read.delim(
file = "./rawdata/timingtest2.txt", nrows = 2, skip = 3,
header = FALSE, na.strings = "", colClasses = rep("character", 32)
)[1, ],
read.delim(
file = "./rawdata/timingtest2.txt", nrows = 2, skip = 3,
header = FALSE, na.strings = "", colClasses = rep("character", 32)
)[2, ]
))[c(1:9, 11:33)]
#  define column classes, list of superlab files, and session IDs
sl.class <- c(rep("character", 4), "numeric", "character", "numeric", "character", "numeric", "numeric", rep("character", 8), "numeric", rep("character", 14))
sl.files <- list.files("./rawdata")[grep("\\d{4}\\.txt", list.files("./rawdata"))] %>% paste0("./rawdata/",.)
sl.names <- gsub(".txt", "", sl.files)
#  Read in all files and combine into a single table
sl.l <- lapply(sl.files, FUN = read.sl)
sl.raw <- bind_rows(sl.l)[c(1:11, 16:18, 25:32)]
paged_table(sl.raw)
unlink('Thesis-Code-Github_cache', recursive = TRUE)
